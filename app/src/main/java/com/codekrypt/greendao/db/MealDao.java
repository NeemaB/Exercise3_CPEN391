package com.codekrypt.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEAL".
*/
public class MealDao extends AbstractDao<Meal, Long> {

    public static final String TABLENAME = "MEAL";

    /**
     * Properties of entity Meal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Price = new Property(1, double.class, "price", false, "PRICE");
        public final static Property Tip = new Property(2, double.class, "tip", false, "TIP");
        public final static Property Stars = new Property(3, int.class, "stars", false, "STARS");
        public final static Property Restaurant_name = new Property(4, String.class, "restaurant_name", false, "RESTAURANT_NAME");
        public final static Property Month = new Property(5, int.class, "month", false, "MONTH");
        public final static Property Day = new Property(6, int.class, "day", false, "DAY");
        public final static Property Hour = new Property(7, int.class, "hour", false, "HOUR");
        public final static Property Minute = new Property(8, int.class, "minute", false, "MINUTE");
        public final static Property Year = new Property(9, int.class, "year", false, "YEAR");
    }


    public MealDao(DaoConfig config) {
        super(config);
    }
    
    public MealDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PRICE\" REAL NOT NULL ," + // 1: price
                "\"TIP\" REAL NOT NULL ," + // 2: tip
                "\"STARS\" INTEGER NOT NULL ," + // 3: stars
                "\"RESTAURANT_NAME\" TEXT NOT NULL ," + // 4: restaurant_name
                "\"MONTH\" INTEGER NOT NULL ," + // 5: month
                "\"DAY\" INTEGER NOT NULL ," + // 6: day
                "\"HOUR\" INTEGER NOT NULL ," + // 7: hour
                "\"MINUTE\" INTEGER NOT NULL ," + // 8: minute
                "\"YEAR\" INTEGER NOT NULL );"); // 9: year
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Meal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getPrice());
        stmt.bindDouble(3, entity.getTip());
        stmt.bindLong(4, entity.getStars());
        stmt.bindString(5, entity.getRestaurant_name());
        stmt.bindLong(6, entity.getMonth());
        stmt.bindLong(7, entity.getDay());
        stmt.bindLong(8, entity.getHour());
        stmt.bindLong(9, entity.getMinute());
        stmt.bindLong(10, entity.getYear());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Meal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getPrice());
        stmt.bindDouble(3, entity.getTip());
        stmt.bindLong(4, entity.getStars());
        stmt.bindString(5, entity.getRestaurant_name());
        stmt.bindLong(6, entity.getMonth());
        stmt.bindLong(7, entity.getDay());
        stmt.bindLong(8, entity.getHour());
        stmt.bindLong(9, entity.getMinute());
        stmt.bindLong(10, entity.getYear());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Meal readEntity(Cursor cursor, int offset) {
        Meal entity = new Meal( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getDouble(offset + 1), // price
            cursor.getDouble(offset + 2), // tip
            cursor.getInt(offset + 3), // stars
            cursor.getString(offset + 4), // restaurant_name
            cursor.getInt(offset + 5), // month
            cursor.getInt(offset + 6), // day
            cursor.getInt(offset + 7), // hour
            cursor.getInt(offset + 8), // minute
            cursor.getInt(offset + 9) // year
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Meal entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPrice(cursor.getDouble(offset + 1));
        entity.setTip(cursor.getDouble(offset + 2));
        entity.setStars(cursor.getInt(offset + 3));
        entity.setRestaurant_name(cursor.getString(offset + 4));
        entity.setMonth(cursor.getInt(offset + 5));
        entity.setDay(cursor.getInt(offset + 6));
        entity.setHour(cursor.getInt(offset + 7));
        entity.setMinute(cursor.getInt(offset + 8));
        entity.setYear(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Meal entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Meal entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Meal entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
